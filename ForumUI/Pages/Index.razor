@page "/"
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject IPostData postData
@inject IuserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage

<h1 class="page-heading text-uppercase mb-4">Forum ZSE</h1>
<div class="post-container">
    <button @onclick="LoadCreatePage" class="suggest-btn btn btn-outline-light btn-lg text-uppercase">Dodaj post</button>
</div>

<div class="row">
    <div class="post-count col-md-4 text-light mt-2">@post?.Count Postów</div>
    <div class="col-md-4 col-xl-5 btn-group">
        <button class="btn btn-order @SortedByNewClass(true)" @onclick="(() => OrderByNew(true))">Nowe</button>
        <button class="btn btn-order @SortedByNewClass(false)" @onclick="(() => OrderByNew(false))">Popularne</button>
    </div>
    <div class="col-md-4 col-xl-3 search-box">
        <input type="text" placeholder="Szukaj" aria-label="Search box" class="form-control rounded-control" @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
    <div class="col-12 d-block d-md-none">
        @if (categories is not null && showCategories)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Kategorie</span>
                <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">wszystkie</div>
                @foreach (var c in categories)
                {
                    <div class="@GetSelectedCategory(c.CategoryName)" @onclick="(() => OnCategoryClick(c.CategoryName))">
                        @c.CategoryName
                    </div>
                }

            </div>
        }
        else
        {
            <div class="categories" @onclick="(() => showCategories = true)">
                <span class="selected-category">@selectedCategory</span>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="col-md-8 col-xl-9">
        @if (post is not null)
        {
            <Virtualize Items="@post" Context="s" OverscanCount="10">
                <div class="post-entry">
                    <div class="@GetVoteClass(s)" @onclick="(() => VoteUp(s))">
                        <div class="text-uppercase">@GetupvotetopText(s)</div>
                        <span class="material-symbols-outlined">
                            thumb_up
                        </span>
                        
                    </div>
                    <div class="post-entry-text">
                        <div class="post-entry-text-title" @onclick="(() => OpenDetails(s))">
                            @s.Post
                        </div>
      
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div class="col-md-4 col-xl-3 d-none d-md-block">
        @if (categories is not null)
        {
            <div class="categories">
                <span class="text-uppercase fw-bold">Kategorie</span>
                <div class="@GetSelectedCategory()" @onclick="(() => OnCategoryClick())">Wszystkie</div>
                @foreach (var c in categories)
                {
                    <div class="@GetSelectedCategory(c.CategoryName)" @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
    </div>
</div>

@code
{
    
        private UserModel loggedInUser;
    private List<PostModel> post;
        private List<CategoryModel> categories;
        private PostModel archivingSuggestiopn;
        private string selectedCategory = "All";
        private string searchtext = "";
        bool isSortedByNew = true;
        private bool showCategories = false;
        protected async override Task OnInitializedAsync()
        {
            categories = await categoryData.GetAllCategories();
            await LoadAndVerifyUser();
        }

    private async Task Archivepost()
        {
            archivingSuggestiopn.Archived = true;
            await postData.UpdatePost(archivingSuggestiopn);
        post.Remove(archivingSuggestiopn);
            archivingSuggestiopn = null;
        //await Filterpost();
        }

        private void LoadCreatePage()
        {
            if (loggedInUser is not null)
            {
                navManager.NavigateTo("/Create");
            }
            else
            {
                navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
            }
        }

        private async Task LoadAndVerifyUser()
        {
            var authState = await authProvider.GetAuthenticationStateAsync();
            string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
            if (string.IsNullOrWhiteSpace(objectId) == false)
            {
                loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();
                string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
                string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;
                string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
                string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;
                bool isDirty = false;
                if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
                {
                    isDirty = true;
                    loggedInUser.ObjectIdentifier = objectId;
                }

                if (firstName.Equals(loggedInUser.FirstName) == false)
                {
                    isDirty = true;
                    loggedInUser.FirstName = firstName;
                }

                if (lastName.Equals(loggedInUser.LastName) == false)
                {
                    isDirty = true;
                    loggedInUser.LastName = lastName;
                }

                if (displayName.Equals(loggedInUser.DisplayName) == false)
                {
                    isDirty = true;
                    loggedInUser.DisplayName = displayName;
                }

                if (email.Equals(loggedInUser.EmailAddress) == false)
                {
                    isDirty = true;
                    loggedInUser.EmailAddress = email;
                }

                if (isDirty)
                {
                    if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                    {
                        await userData.CreateUser(loggedInUser);
                    }
                    else
                    {
                        await userData.UpdateUser(loggedInUser);
                    }
                }
            }
        }

        protected async override Task OnAfterRenderAsync(bool firstRender)
        {
            if (firstRender)
            {
               // await LoadFilterState();
                await FilterPosts();
                StateHasChanged();
            }
        }
        
        private async Task LoadFilterState()
        {
            var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
            selectedCategory = stringResults.Success ? stringResults.Value : "All";
            stringResults = await sessionStorage.GetAsync<string>(nameof(searchtext));
            searchtext = stringResults.Success ? stringResults.Value : "";
            var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
            isSortedByNew = boolResults.Success ? boolResults.Value : true;
        }

        private async Task SaveFilterState()
        {
            await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
            await sessionStorage.SetAsync(nameof(searchtext), searchtext);
            await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
        }

        private async Task FilterPosts()
        {
            var output = await postData.GetAllApprovedPosts();
            if (selectedCategory != "All")
            {
                output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
            }

            if (string.IsNullOrWhiteSpace(searchtext) == false)
            {
                output = output.Where(s => s.Post.Contains(searchtext, StringComparison.InvariantCultureIgnoreCase) || s.Description.Contains(searchtext, StringComparison.InvariantCultureIgnoreCase)).ToList();
            }

            if (isSortedByNew)
            {
                output = output.OrderByDescending(s => s.DateCreated).ToList();
            }
            else
            {
                output = output.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();
            }

        post = output;
            await SaveFilterState();
        }

        private async Task OrderByNew(bool isNew)
        {
            isSortedByNew = isNew;
            await FilterPosts();
        }

        private async Task OnSearchInput(string searchInput)
        {
            searchtext = searchInput;
            await FilterPosts();
        }

        private async Task OnCategoryClick(string category = "All")
        {
            selectedCategory = category;
            showCategories = false;
            await FilterPosts();
        }

        private async Task VoteUp(PostModel post)
        {
            if (loggedInUser is not null)
            {
                if (post.Author.Id == loggedInUser.Id)
                {
                    return;
                }

                if (post.UserVotes.Add(loggedInUser.Id) == false)
                {
                    post.UserVotes.Remove(loggedInUser.Id);
                }

                await postData.UpvotePost(post.Id, loggedInUser.Id);
                if (isSortedByNew == false)
                {
                   // post = post.OrderByDescending(s => s.UserVotes.Count).ThenByDescending(s => s.DateCreated).ToList();
                }
            }
            else
            {
                navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
            }
        }

        private string GetupvotetopText(PostModel post)
        {
            if (post.UserVotes?.Count > 0)
            {
                return post.UserVotes.Count.ToString("00");
            }
            else
            {
                if (post.Author.Id == loggedInUser?.Id)
                {
                    return "Awaiting";
                }
                else
                {
                    return "Kliknij by dać";
                }
            }
        }

        private string GetUpvoteBottomtext(PostModel post)
        {
            if (post.UserVotes?.Count > 1)
            {
                return "likes";
            }
            else
            {
                return "like";
            }
        }

        private void OpenDetails(PostModel post)
        {
            navManager.NavigateTo($"/Details/{post.Id}");
        }

        private string SortedByNewClass(bool isNew)
        {
            if (isNew == isSortedByNew)
            {
                return "sort-selected";
            }
            else
            {
                return "";
            }
        }

        private string GetVoteClass(PostModel post)
        {
            if (post.UserVotes is null || post.UserVotes.Count == 0)
            {
            return "post-entry-no-votes";
            }
            else if (post.UserVotes.Contains(loggedInUser?.Id))
            {
            return "post-entry-voted";
            }
            else
            {
            return "post-entry-not-voted";
            }
        }

   

        private string GetSelectedCategory(string category = "All")
        {
            if (category == selectedCategory)
            {
                return "selected-category";
            }
            else
            {
                return "";
            }
        }
}