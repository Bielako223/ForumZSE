@page "/Profile"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject IPostData postData
@inject IuserData userData
@inject NavigationManager navManager
@inject ICommentData commentData
@inject IDbConnection dbConnection

<h1 class="page-heading text-uppercase mb-4">Mój profil</h1>

<div class="row">
    <div class="col-12 close-button-section">
        <button class="btn btn-close" @onclick="ClosePage"></button>
    </div>
</div>

<div class="form-layout mb-3">
    <h2 class="my-submission-heading">Moje konto</h2>
    <p class="my-submission-text">
        <a href="MicrosoftIdentity/Account/EditProfile">Edytuj profil</a>
    </p>
</div>

    <div class="container text-center profilebutton mb-3">
        <div class="col align-self-center btn-group">
            <button class="btn btn-order " @onclick="(() => kom=false)">Posty</button>
            <button class="btn btn-order " @onclick="(() => kom=true)">Komentarze</button>
        </div>
    </div>



@if (kom==false)
{
    @if (approved?.Count > 0)
    {
        <div class="form-layout mb-3">
            <h2 class="my-submission-heading">Zaakceptowane Posty</h2>
            <p class="my-submission-text">posty zaakceptowane przez administratora</p>

            @foreach (var s in approved)
            {
                <hr class="my-submission-separator" />
                <div class="fw-bold post-detail-post" @onclick="(() => OpenDetails(s.Id))">
                    @s.Post
                </div>
                <p class="my-submission-text">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="my-submission-text">
                    Likes : @s.UserVotes.Count
                </p>
                <p class="my-submission-text">
                    @s.Category.CategoryName
                </p>
                <p class="my-submission-text">
                    @s.Description
                </p>
            }
        </div>
    }
    @if (archived?.Count > 0)
    {
        <div class="form-layout mb-3">
            <h2 class="my-submission-heading">Zarchiwizowane posty</h2>
            <p class="my-submission-text">archiwalne posty</p>

            @foreach (var s in archived)
            {
                <hr class="my-submission-separator" />
                <div class="fw-bold post-detail-post" @onclick="(() => OpenDetails(s.Id))">
                    @s.Post
                </div>
                <p class="my-submission-text">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="my-submission-text">
                    Likes : @s.UserVotes.Count
                </p>
                <p class="my-submission-text">
                    @s.Category.CategoryName
                </p>
                <p class="my-submission-text">
                    @s.Description
                </p>
            }
        </div>
    }
    @if (pending?.Count > 0)
    {
        <div class="form-layout mb-3">
            <h2 class="my-submission-heading">Sprawdzane Posty</h2>
            <p class="my-submission-text">posty sprawdzane przez administratora </p>

            @foreach (var s in pending)
            {
                <hr class="my-submission-separator" />
                <div class="fw-bold post-detail-post" @onclick="(() => OpenDetails(s.Id))">
                    @s.Post
                </div>
                <p class="my-submission-text">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="my-submission-text">
                    Likes : @s.UserVotes.Count
                </p>
                <p class="my-submission-text">
                    @s.Category.CategoryName
                </p>
                <p class="my-submission-text">
                    @s.Description
                </p>
            }
        </div>
    }
    @if (rejected?.Count > 0)
    {
        <div class="form-layout mb-3">
            <h2 class="my-submission-heading">Odrzucone Posty</h2>
            <p class="my-submission-text">Posty odrzucone przez administratora</p>

            @foreach (var s in rejected)
            {
                <hr class="my-submission-separator" />
                <div class="fw-bold post-detail-post" @onclick="(() => OpenDetails(s.Id))">
                    @s.Post
                </div>
                <p class="my-submission-text">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <p class="my-submission-text">
                    Likes : @s.UserVotes.Count
                </p>
                <p class="my-submission-text">
                    @s.Category.CategoryName
                </p>
                <p class="my-submission-text">
                    @s.Description
                </p>
            }
        </div>
    }
}
else
{
    @if (comments?.Count > 0)
    {
        <div class="form-layout mb-3">
            <h2 class="my-submission-heading">Twoje komentarze</h2>

            @foreach (var s in comments)
            {
                <hr class="my-submission-separator" />
                <p class="fw-bold post-detail-post">
                    @s.Comment
                </p>
                <div class=" my-submission-text" @onclick="(()=> OpenDetails(s.Post.Id))">
                    <span>Post: </span>
                    @s.Post.Post
                </div>
                <p class="my-submission-text">
                    @s.DateCreated.ToString("MM.dd.yyyy")
                </p>
                <span class="oi oi-x subbmision-edit-reject" @onclick="(() => DeleteComment(s))"></span>
            }
        </div>

    }
}



@code {
    private UserModel loggedInUser;
    private List<PostModel> submissions;
    private List<PostModel> approved;
    private List<PostModel> archived;
    private List<PostModel> pending;
    private List<PostModel> rejected;
    private List<CommentModel> comments;
    private bool kom = false;
    protected async override Task OnInitializedAsync()
    {
        loggedInUser = await authProvider.GetUserFromAuth(userData);
        var results = await postData.GetUsersPosts(loggedInUser.Id);
        
        var res = await commentData.GetUsersComments(loggedInUser.Id);
        if (loggedInUser is not null && results is not null && res is not null)
        {
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false & s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            pending = submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
            comments = res.OrderByDescending(s => s.DateCreated).ToList();
        }
        else if (loggedInUser is not null && results is not null)
        {
            submissions = results.OrderByDescending(s => s.DateCreated).ToList();
            approved = submissions.Where(s => s.ApprovedForRelease && s.Archived == false & s.Rejected == false).ToList();
            archived = submissions.Where(s => s.Archived && s.Rejected == false).ToList();
            pending = submissions.Where(s => s.ApprovedForRelease == false && s.Rejected == false).ToList();
            rejected = submissions.Where(s => s.Rejected).ToList();
        }
        else if (loggedInUser is not null && res is not null)
        {
            comments = res.OrderByDescending(s => s.DateCreated).ToList();
        }
    }
    private void DeleteComment(CommentModel comment)
    {
        dbConnection.DeleteComment(comment);
        commentData.DeleteCommentData(comment);
        comments.Remove(item: comment);
    }

    private void OpenDetails(string Id)
    {
        navManager.NavigateTo($"/Details/{Id}");
    }

    private void ClosePage()
    {
        navManager.NavigateTo("/");
    }
}
